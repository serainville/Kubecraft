/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "MinecraftServerController/pkg/apis/minecraftserver/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MinecraftServerLister helps list MinecraftServers.
// All objects returned here must be treated as read-only.
type MinecraftServerLister interface {
	// List lists all MinecraftServers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MinecraftServer, err error)
	// MinecraftServers returns an object that can list and get MinecraftServers.
	MinecraftServers(namespace string) MinecraftServerNamespaceLister
	MinecraftServerListerExpansion
}

// minecraftServerLister implements the MinecraftServerLister interface.
type minecraftServerLister struct {
	indexer cache.Indexer
}

// NewMinecraftServerLister returns a new MinecraftServerLister.
func NewMinecraftServerLister(indexer cache.Indexer) MinecraftServerLister {
	return &minecraftServerLister{indexer: indexer}
}

// List lists all MinecraftServers in the indexer.
func (s *minecraftServerLister) List(selector labels.Selector) (ret []*v1alpha1.MinecraftServer, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MinecraftServer))
	})
	return ret, err
}

// MinecraftServers returns an object that can list and get MinecraftServers.
func (s *minecraftServerLister) MinecraftServers(namespace string) MinecraftServerNamespaceLister {
	return minecraftServerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MinecraftServerNamespaceLister helps list and get MinecraftServers.
// All objects returned here must be treated as read-only.
type MinecraftServerNamespaceLister interface {
	// List lists all MinecraftServers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MinecraftServer, err error)
	// Get retrieves the MinecraftServer from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.MinecraftServer, error)
	MinecraftServerNamespaceListerExpansion
}

// minecraftServerNamespaceLister implements the MinecraftServerNamespaceLister
// interface.
type minecraftServerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MinecraftServers in the indexer for a given namespace.
func (s minecraftServerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MinecraftServer, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MinecraftServer))
	})
	return ret, err
}

// Get retrieves the MinecraftServer from the indexer for a given namespace and name.
func (s minecraftServerNamespaceLister) Get(name string) (*v1alpha1.MinecraftServer, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("minecraftserver"), name)
	}
	return obj.(*v1alpha1.MinecraftServer), nil
}
